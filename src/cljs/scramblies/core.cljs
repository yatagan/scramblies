(ns scramblies.core
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require
   [reagent.core :as reagent :refer [atom]]
   [reagent.dom :as rdom]
   [reagent.session :as session]
   [reitit.frontend :as reitit]
   [clerk.core :as clerk]
   [accountant.core :as accountant]
   [cljs-http.client :as http]
   [cljs.core.async :refer [<!]]))

;; -------------------------
;; Page components

(defn- atom-input [value placeholder]
  [:input {:type "text"
           :value @value
           :on-change #(reset! value (-> % .-target .-value))
           :placeholder placeholder}])

(defn- fetch-scramble [str1 str2 callback]
  (go (let [response (<! (http/get "/scramble"
                                   {:query-params {:str1 str1 :str2 str2}}))]
        (callback (:body response)))))

(defn scramble-page []
  (let [!str1 (reagent/atom "")
        !str2 (reagent/atom "")]
    (fn []
      [:span.main
       [:div
        [atom-input !str1 :str1]
        [atom-input !str2 :str2]
        [:button {:on-click #(fetch-scramble @!str1 @!str2 js/alert)} "scramble?"]]])))

(defn about-page []
  (fn [] [:span.main
          [:h1 "About scramblies"]]))

;; -------------------------
;; Routes

(def router
  (reitit/router
    [["/" :index]
     ["/about" :about]]))

(defn path-for [route & [params]]
  (if params
    (:path (reitit/match-by-name router route params))
    (:path (reitit/match-by-name router route))))

;; -------------------------
;; Translate routes -> page components

(defn page-for [route]
  (case route
    :index #'scramble-page
    :about #'about-page))

;; -------------------------
;; Page mounting component

(defn current-page []
  (fn []
    (let [page (:current-page (session/get :route))]
      [:div
       [:header
        [:p [:a {:href (path-for :index)} "Home"] " | "
         [:a {:href (path-for :about)} "About scramblies"]]]
       [page]
       [:footer
        [:p "scramblies was generated by the "
         [:a {:href "https://github.com/reagent-project/reagent-template"} "Reagent Template"] "."]]])))

;; -------------------------
;; Initialize app

(defn mount-root []
  (rdom/render [current-page] (.getElementById js/document "app")))

(defn init! []
  (clerk/initialize!)
  (accountant/configure-navigation!
   {:nav-handler
    (fn [path]
      (let [match (reitit/match-by-path router path)
            current-page (:name (:data  match))
            route-params (:path-params match)]
        (reagent/after-render clerk/after-render!)
        (session/put! :route {:current-page (page-for current-page)
                              :route-params route-params})
        (clerk/navigate-page! path)
        ))
    :path-exists?
    (fn [path]
      (boolean (reitit/match-by-path router path)))})
  (accountant/dispatch-current!)
  (mount-root))
